package com.frxs.receipt.greendao.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.frxs.receipt.greendao.entity.ProductEntity;

import com.frxs.receipt.greendao.entity.ReceivedListEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECEIVED_LIST_ENTITY".
*/
public class ReceivedListEntityDao extends AbstractDao<ReceivedListEntity, Long> {

    public static final String TABLENAME = "RECEIVED_LIST_ENTITY";

    /**
     * Properties of entity ReceivedListEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Pid = new Property(1, Long.class, "pid", false, "PID");
        public final static Property BatchNumber = new Property(2, String.class, "batchNumber", false, "BATCH_NUMBER");
        public final static Property ProductionDate = new Property(3, String.class, "productionDate", false, "PRODUCTION_DATE");
        public final static Property DueDate = new Property(4, String.class, "dueDate", false, "DUE_DATE");
        public final static Property ReceivedQty = new Property(5, double.class, "receivedQty", false, "RECEIVED_QTY");
    }

    private DaoSession daoSession;

    private Query<ReceivedListEntity> productEntity_ReceivedListEntitiesQuery;

    public ReceivedListEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ReceivedListEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECEIVED_LIST_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PID\" INTEGER," + // 1: pid
                "\"BATCH_NUMBER\" TEXT," + // 2: batchNumber
                "\"PRODUCTION_DATE\" TEXT," + // 3: productionDate
                "\"DUE_DATE\" TEXT," + // 4: dueDate
                "\"RECEIVED_QTY\" REAL NOT NULL );"); // 5: receivedQty
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECEIVED_LIST_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReceivedListEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(2, pid);
        }
 
        String batchNumber = entity.getBatchNumber();
        if (batchNumber != null) {
            stmt.bindString(3, batchNumber);
        }
 
        String productionDate = entity.getProductionDate();
        if (productionDate != null) {
            stmt.bindString(4, productionDate);
        }
 
        String dueDate = entity.getDueDate();
        if (dueDate != null) {
            stmt.bindString(5, dueDate);
        }
        stmt.bindDouble(6, entity.getReceivedQty());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReceivedListEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(2, pid);
        }
 
        String batchNumber = entity.getBatchNumber();
        if (batchNumber != null) {
            stmt.bindString(3, batchNumber);
        }
 
        String productionDate = entity.getProductionDate();
        if (productionDate != null) {
            stmt.bindString(4, productionDate);
        }
 
        String dueDate = entity.getDueDate();
        if (dueDate != null) {
            stmt.bindString(5, dueDate);
        }
        stmt.bindDouble(6, entity.getReceivedQty());
    }

    @Override
    protected final void attachEntity(ReceivedListEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ReceivedListEntity readEntity(Cursor cursor, int offset) {
        ReceivedListEntity entity = new ReceivedListEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // pid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // batchNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // productionDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dueDate
            cursor.getDouble(offset + 5) // receivedQty
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReceivedListEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setBatchNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProductionDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDueDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReceivedQty(cursor.getDouble(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ReceivedListEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ReceivedListEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReceivedListEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "receivedListEntities" to-many relationship of ProductEntity. */
    public List<ReceivedListEntity> _queryProductEntity_ReceivedListEntities(Long pid) {
        synchronized (this) {
            if (productEntity_ReceivedListEntitiesQuery == null) {
                QueryBuilder<ReceivedListEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Pid.eq(null));
                productEntity_ReceivedListEntitiesQuery = queryBuilder.build();
            }
        }
        Query<ReceivedListEntity> query = productEntity_ReceivedListEntitiesQuery.forCurrentThread();
        query.setParameter(0, pid);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getProductEntityDao().getAllColumns());
            builder.append(" FROM RECEIVED_LIST_ENTITY T");
            builder.append(" LEFT JOIN PRODUCT_ENTITY T0 ON T.\"PID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ReceivedListEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        ReceivedListEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ProductEntity productEntity = loadCurrentOther(daoSession.getProductEntityDao(), cursor, offset);
        entity.setProductEntity(productEntity);

        return entity;    
    }

    public ReceivedListEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ReceivedListEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ReceivedListEntity> list = new ArrayList<ReceivedListEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ReceivedListEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ReceivedListEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
